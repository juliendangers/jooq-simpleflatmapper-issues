buildscript {
	ext {
		kotlinVersion = '1.2.21'
		springBootVersion = '2.0.0.RC1'
	}
	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
		classpath('nu.studer:gradle-jooq-plugin:2.0.9')
        classpath('gradle.plugin.com.boxfuse.client:gradle-plugin-publishing:5.0.7')
	}
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'nu.studer.jooq'
apply plugin: 'idea'
apply plugin: 'org.flywaydb.flyway'

group = 'com.juliendangers'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

sourceSets {
    main.java.srcDirs += [file("$buildDir/generated-src/jooq/main")]
}

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://plugins.gradle.org/m2/" }
}

compileKotlin {
	kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
	kotlinOptions.jvmTarget = "1.8"
}

ext {
	springCloudVersion = 'Finchley.M5'
}

dependencies {
	compile('org.flywaydb:flyway-core')
	compile('org.springframework.boot:spring-boot-starter-webflux')

	compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion")
	compile("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")
    // shouldn't be required, but otherwise gradle's doing shit
    compile("org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion")

    compile('org.springframework.boot:spring-boot-starter-jooq')
    compile('org.springframework:spring-jdbc')
    compile('org.jooq:jooq:3.10.4')
    compile('org.jooq:jool:0.9.12')
    compile('org.simpleflatmapper:sfm-jooq:3.15.7')

    compile('io.arrow-kt:arrow-core:0.6.1')
    compile('io.arrow-kt:arrow-typeclasses:0.6.1')
    compile('io.arrow-kt:arrow-data:0.6.1')
    compile('io.arrow-kt:arrow-instances:0.6.1')
    compile('io.arrow-kt:arrow-syntax:0.6.1')
    kapt('io.arrow-kt:arrow-annotations-processor:0.6.1')

    compile('com.fasterxml.jackson.core:jackson-databind')
	compile('com.fasterxml.jackson.core:jackson-annotations')
    compile('com.fasterxml.jackson.module:jackson-module-kotlin')

	compile('org.postgresql:postgresql')
    jooqRuntime('org.postgresql:postgresql')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('io.projectreactor:reactor-test')
}

idea {
    module {
        sourceDirs += files(
                'build/generated/source/kapt/main',
                'build/generated/source/kaptKotlin/main',
                'build/tmp/kapt/main/kotlinGenerated')
        generatedSourceDirs += files(
                'build/generated/source/kapt/main',
                'build/generated/source/kaptKotlin/main',
                'build/tmp/kapt/main/kotlinGenerated')
    }
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

kapt {
    generateStubs = true
}

jooq {
    version = '3.10.4'
    edition = 'OSS'
    main(sourceSets.main) {
        jdbc {
            driver = 'org.postgresql.Driver'
            url = "${System.env.DB_URL}"
            user = "${System.env.DB_USERNAME}"
            password = "${System.env.DB_PASSWORD}"
        }
        generator {
            name = 'org.jooq.util.DefaultGenerator'
            strategy {
                name = 'org.jooq.util.DefaultGeneratorStrategy'
            }
            database {
                name = 'org.jooq.util.postgres.PostgresDatabase'
                inputSchema = 'public'
                includes = '.*'
                excludes = 'schema_version'
            }
            generate {
                relations = true
                deprecated = false
                records = true
                daos=false
                routines=false
                immutablePojos = true
                javaTimeTypes=true
            }
            target {
                packageName = 'com.juliendangers.jooqsfm.persistence'
            }
        }
    }
}

flyway {
    url = "${System.env.DB_URL}"
    user = "${System.env.DB_USERNAME}"
    password = "${System.env.DB_PASSWORD}"
    schemas = ['public']
    locations = ["filesystem:$project.projectDir/src/main/resources/db/migration"]
}

generateMainJooqSchemaSource.dependsOn flywayMigrate
